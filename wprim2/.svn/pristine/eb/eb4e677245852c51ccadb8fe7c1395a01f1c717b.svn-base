package com.ninemax.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.upload.UploadFile;
import com.ninemax.model.Journal;
import com.ninemax.service.IJournalService;
import com.ninemax.util.JournalStatus;
import com.ninemax.util.RoleName;
import com.ninemax.util.Role_ActionStatus;
import com.ninemax.util.UserUtil;

public class IJournalServiceImpl implements IJournalService {

	// 期刊名录保存
	@Override
	public void save(String journalTitle, String VernacularJournalTitle,
			String country, String publisher, String ISSN1, String ISSN2,
			String EISSN1, String EISSN2, String ElectronicLinks,
			String EditorInChief, String EditorEmail, String Abbreviation,
			String StartYear, String suspendedtime, String Description,
			String start_volume, String start_issue, String path) {
		SimpleDateFormat df = new SimpleDateFormat("yy-MM-dd HH:mm:ss.SSS");
		Journal journal = new Journal().set("journalTitle", journalTitle)
				.set("VernacularJournalTitle", VernacularJournalTitle)
				.set("country", country).set("publisher", publisher)
				.set("ISSN", ISSN1 + "-" + ISSN2)
				.set("EISSN", EISSN1 + "-" + EISSN2)
				.set("ElectronicLinks", ElectronicLinks)
				.set("EditorInChief", EditorInChief)
				.set("EditorEmail", EditorEmail)
				.set("Abbreviation", Abbreviation).set("StartYear", StartYear)
				.set("suspendedtime", suspendedtime)
				.set("Description", Description)
				.set("start_volume", start_volume)
				.set("start_issue", start_issue).set("cover", path);

		// 添加UUID
		journal.set("globalid", UUID.randomUUID().toString().replace("-", ""));
		// 添加系统时间
		journal.set("CRTIME", df.format(new Date()));
		journal.set("PubDate", df.format(new Date()));
		journal.save();
	}

	// 查询某一期刊名录
	@Override
	public Record queryJournal(int id,Record curr_user) {
		//检查当前用户权限和期刊状态是否允许修改
		//1.检查当前用户,系统管理员、期刊编辑部、国家数据管理员允许修改
		List<String> roleNames = new ArrayList<String>();
		roleNames.add(RoleName.SYSTEMADMINISTRATOR);
		roleNames.add(RoleName.JOURNALEDITORIALDEPARTMENT);
		roleNames.add(RoleName.NATIONALDATAMANAGER);
		if(UserUtil.haveAnyOfRoles(curr_user, roleNames)){
			//2.检查期刊状态，未提交的、评审通过的可以修改
			//2.检查期刊状态，未提交的期刊可以删除
			Record journal = Db.findFirst("select * from WSSJOURNAL where JournalId = ?",id);
			String journalTitle = journal == null ? null : journal.getStr("journalTitle");
			if(journalTitle != null && journalTitle.equals(JournalStatus.UNSUBMITTED) || journalTitle.equals(JournalStatus.APPROVEDBYRJSC)){
				return Db.findById("WSSJOURNAL", "JournalId", id);
			}
		}
		return null;
	}

	@Override
	public void delete(int journalId,Record curr_user) {
		//检查当前用户和期刊状态是否允许删除
		//1.检查当前用户权限，系统管理员、期刊编辑部、国家数据管理员可以删除
		List<String> roleNames = new ArrayList<String>();
		roleNames.add(RoleName.SYSTEMADMINISTRATOR);
		roleNames.add(RoleName.JOURNALEDITORIALDEPARTMENT);
		roleNames.add(RoleName.NATIONALDATAMANAGER);
		if(UserUtil.haveAnyOfRoles(curr_user, roleNames)){
			//2.检查期刊状态，未提交的期刊可以删除
			Record journal = Db.findFirst("select * from WSSJOURNAL where JournalId = ?",journalId);
			String journalTitle = journal == null ? null : journal.getStr("journalTitle");
			if(journalTitle != null && journalTitle.equals(JournalStatus.UNSUBMITTED)){
				Db.deleteById("WSSJOURNAL", "JournalId", journalId);
			}
		}
	}

	@Override
	public Object search(Record curr_user, String pageNumber,
			String journalTitle, String country, String reviewStatus) {
		// 预处理
		int intPageNumber = Integer.valueOf(pageNumber);
		int pageSize = 10;
		String userCountry = curr_user.getStr("Country");
		journalTitle = journalTitle == null ? "" : journalTitle;
		country = country == null ? "" : country;
		reviewStatus = reviewStatus == null ? "" : reviewStatus;
		int userId = curr_user.getInt("UserId");

		// 结果集
		Page<Record> journalList = null;

		// 1.查找期刊结果集
		// 系统管理员可以看到所有期刊
		if (UserUtil.haveRole(curr_user, RoleName.SYSTEMADMINISTRATOR)) {
			journalList = Db.paginate(intPageNumber, pageSize, "select *",
					"from WSSJOURNAL where journalTitle like '%" + journalTitle
							+ "%' and country like '%" + country
							+ "%' and review_status like '%" + reviewStatus
							+ "%'");
		} else {
			// 国家数据管理员可以看到所有非未提交状态的期刊和本国未提交状态的期刊
			if (UserUtil.haveRole(curr_user, RoleName.NATIONALDATAMANAGER)) {
				journalList = Db.paginate(intPageNumber, pageSize, "select *",
						"from WSSJOURNAL where journalTitle like '%"
								+ journalTitle
								+ "%' and ((review_status like '%"
								+ reviewStatus + "%' and review_status != '"
								+ JournalStatus.UNSUBMITTED
								+ "' and country like '%" + country
								+ "%') or (review_status = '"
								+ JournalStatus.UNSUBMITTED
								+ "' and country = '" + userCountry + "')");
			} else {
				// 期刊所属编辑部可以看到所有非未提交状态的期刊和本期刊编辑部的期刊
				if (UserUtil.haveRole(curr_user,
						RoleName.JOURNALEDITORIALDEPARTMENT)) {
					journalList = Db.paginate(
							intPageNumber,
							pageSize,
							"select *",
							"from WSSJOURNAL where journalTitle like '%"
									+ journalTitle
									+ "%' and ((review_status != '"
									+ JournalStatus.UNSUBMITTED
									+ "' and review_status like '%"
									+ reviewStatus + "%' and country like '%"
									+ country + "%') or (review_status = '"
									+ JournalStatus.UNSUBMITTED
									+ "' and country = '" + userCountry
									+ "' and edit_department = '"
									+ curr_user.getStr("EditDep") + "'))");
				} else {
					// 其他人员可以看到所有非未提交状态的期刊
					journalList = Db.paginate(intPageNumber, pageSize,
							"select *",
							"from WSSJOURNAL where review_status != '"
									+ JournalStatus.UNSUBMITTED
									+ "' and review_status like '%"
									+ reviewStatus + "%' and country like '%"
									+ country + "%' and journalTitle like '%"
									+ journalTitle + "%'");
				}
			}
		}

		List<Record> journals = journalList.getList();
		if (journals != null && journals.size() != 0) {
			// 2.判断期刊是否可以修改、删除
			// 2.1角色验证，系统管理员、期刊编辑部、国家数据管理员可以进行修改、删除
			List<String> roleNames = new ArrayList<String>();
			roleNames.add(RoleName.SYSTEMADMINISTRATOR);
			roleNames.add(RoleName.JOURNALEDITORIALDEPARTMENT);
			roleNames.add(RoleName.NATIONALDATAMANAGER);
			if (UserUtil.haveAnyOfRoles(curr_user, roleNames)) {
				// 2.2期刊状态验证，为提交和评审通过的期刊可以修改；未提交的期刊可以删除
				for (Record journal : journals) {
					String journalReviewStatus = journal
							.getStr("review_status");
					journal.set(
							"canModify",
							(journalReviewStatus
									.equals(JournalStatus.UNSUBMITTED) || journalReviewStatus
									.equals(JournalStatus.APPROVEDBYRJSC)) ? true
									: false).set(
							"canDelete",
							journalReviewStatus
									.equals(JournalStatus.UNSUBMITTED) ? true
									: false);
				}
			} else {
				for (Record journal : journals) {
					journal.set("canModify", false).set("canDelete", false);
				}
			}

			// 3.判断期刊是否可以进行国家级评审和国际级评审
			for (Record journal : journals) {
				String journalReviewStatus = journal.getStr("review_status");
				int journalId = journal.getInt("JournalId");
				// 3.1.1提交至NJSC和NJSC评审中的期刊可以进行国家级评审
				if (journalReviewStatus.equals(JournalStatus.SUBMITTEDTONJSC)
						|| journalReviewStatus
								.equals(JournalStatus.REVIEWEDBYNJSC)) {
					// 3.1.2国家期刊评委和国家期刊评委主席可以进行国家级评审
					List<String> roleNames2 = new ArrayList<String>();
					roleNames2.add(RoleName.NATIONALJOURNALREVIEWEXPERT);
					roleNames2
							.add(RoleName.CHAIRMANOFNATIONALJOURNALREVIEWCOMMITTEE);
					if (UserUtil.haveAnyOfRoles(curr_user, roleNames2)) {
						// 3.1.3没有进行过国家级评审投票的可以评审
						Record vote = Db
								.findFirst("select * from Wprim_Vote where user_id = "
										+ userId
										+ " and journal_id = "
										+ journalId + " and type = 'national'");
						journal.set("canNationalReview", vote == null ? true
								: false);
						journal.set("haveNationalVote", true);
					} else {
						journal.set("haveNationalVote", false);
					}
				} else {
					// 3.2.1提交至RJSC和RJSC评审中的期刊可以进行国际级评审
					if (journalReviewStatus
							.equals(JournalStatus.SUBMITTEDTORJSC)
							|| journalReviewStatus
									.equals(JournalStatus.REVIEWEDBYRJSC)) {
						// 3.2.2国际期刊评委和国际期刊评委主席可以进行国际级评审
						List<String> roleNames3 = new ArrayList<String>();
						roleNames3.add(RoleName.REGIONALJOURNALREVIEWEXPERT);
						roleNames3
								.add(RoleName.CHAIRMANOFREGIONALJOURNALREVIEWCOMMITTEE);
						if (UserUtil.haveAnyOfRoles(curr_user, roleNames3)) {
							// 3.2.3没有进行过国际级期刊评审投票的可以投票
							Record vote = Db
									.findFirst("select * from Wprim_Vote where user_id = "
											+ userId
											+ " and journal_id = "
											+ journalId
											+ " and type = 'regional'");
							journal.set("canRegionalReview",
									vote == null ? true : false);
							journal.set("haveRegionalVote", true);
						} else {
							journal.set("haveRegionalVote", false);
						}
					}
				}
			}

			// 4.计算每个期刊评论、赞同、反对的票数,区分国家级评审和国际级评审
			for (Record journal : journals) {
				int journalId = journal.getInt("JournalId");
				journal.set(
						"nationalRemarks",
						Db.findFirst(
								"select count(*) as count from Wprim_Vote where journal_id = "
										+ journalId
										+ " and type = 'national' and comment is not null and comment != ''")
								.get("count"))
						.set("nationalAgreeCount",
								Db.findFirst(
										"select count(*) as count from Wprim_Vote where journal_id = "
												+ journalId
												+ " and is_agree = 1 and type = 'national'")
										.get("count"))
						.set("nationalDisagreeCount",
								Db.findFirst(
										"select count(*) as count from Wprim_Vote where journal_id = "
												+ journalId
												+ " and is_agree = 0 and type = 'national'")
										.get("count"))
						.set("regionalRemarks",
								Db.findFirst(
										"select count(*) as count from Wprim_Vote where journal_id = "
												+ journalId
												+ " and type = 'regional' and comment is not null and comment != ''")
										.get("count"))
						.set("regionalAgreeCount",
								Db.findFirst(
										"select count(*) as count from Wprim_Vote where journal_id = "
												+ journalId
												+ " and is_agree = 1 and type = 'regional'")
										.get("count"))
						.set("regionalDisagreeCount",
								Db.findFirst(
										"select count(*) as count from Wprim_Vote where journal_id = "
												+ journalId
												+ " and is_agree = 0 and type = 'regional'")
										.get("count"));
			}
		}

		return journalList;
	}

	@Override
	public Object countPageNumberList(int pageNumber, int totalPages) {
		// 显示页码总数
		int count = 10;
		pageNumber = pageNumber < 1 ? 1 : pageNumber;
		pageNumber = pageNumber > totalPages ? totalPages : pageNumber;
		
		if (pageNumber < ((count / 2) + (count % 2 == 0 ? 2 : 1))) {
			List<Integer> result = new ArrayList<Integer>();
			for (int i = 1; i <= totalPages; i++) {
				result.add(i);
			}
			return result;
		} else if (pageNumber > (totalPages - ((count / 2) + ((count % 2) == 0 ? 1
				: 0)))) {
			List<Integer> result = new ArrayList<Integer>();
			for (int i = totalPages - (count - 1); i <= totalPages; i++) {
				result.add(i);
			}
			return result;
		} else {
			if (count % 2 == 0) {
				List<Integer> result = new ArrayList<Integer>();
				for (int i = pageNumber - (count / 2 - 1); i < pageNumber
						+ (count / 2 - 1); i++) {
					result.add(i);
				}
				return result;
			} else {
				List<Integer> result = new ArrayList<Integer>();
				for (int i = pageNumber - (count / 2); i <= pageNumber
						+ (count / 2); i++) {
					result.add(i);
				}
				return result;
			}
		}
	}

	@Override
	public Object getAllReviewStatus() {
		List<String> reviewStatus = new ArrayList<String>();
		reviewStatus.add(JournalStatus.APPROVEDBYRJSC);
		reviewStatus.add(JournalStatus.REJECTEDBYNJSC);
		reviewStatus.add(JournalStatus.REJECTEDBYRJSC);
		reviewStatus.add(JournalStatus.REVIEWEDBYNJSC);
		reviewStatus.add(JournalStatus.REVIEWEDBYRJSC);
		reviewStatus.add(JournalStatus.SUBMITTEDTONJSC);
		reviewStatus.add(JournalStatus.SUBMITTEDTORJSC);
		reviewStatus.add(JournalStatus.UNSUBMITTED);
		return reviewStatus;
	}

	@Override
	public Object review(Record curr_user, String actionStatus,
			String[] journalIds) {
		if (journalIds != null && journalIds.length != 0) {
			// 判断当前用户是否有进行当前评审操作的权限
			Role_ActionStatus[] roleActionStatusArray = Role_ActionStatus.values();
			List<Integer> roleIds = new ArrayList<Integer>();
			for (Role_ActionStatus ras : roleActionStatusArray) {
				List<String> actionStatusList = ras.getRoleActionStatus();
				if (actionStatusList.contains(actionStatus)) {
					roleIds.add(ras.getRoleId());
				}
			}
			int errorAmount = 0;
			if (UserUtil.havaAnyOfRoles(curr_user, roleIds)) {
				// 判断每一个期刊状态是否可以进行当前评审操作
				List<Record> journalList = new ArrayList<Record>();
				for (String journalStrId : journalIds) {
					journalList.add(Db.findFirst(
							"select * from WSSJOURNAL where JournalId = ?",
							journalStrId));
				}
				int failed = 0;
				String[] oldStatus = new String[2];
				String targetStatus = null;
				// 处理评审操作类型，结果为原始期刊评审状态（1,2）+操作完成的期刊状态
				if (actionStatus != null) {
					String[] oldStatusAndtargetStatus = actionStatus.split("_");
					if (oldStatusAndtargetStatus.length == 2) {
						targetStatus = oldStatusAndtargetStatus[1];
						if (oldStatusAndtargetStatus[0].contains("$")) {
							oldStatus = oldStatusAndtargetStatus[0].split("\\$");
						}else{
							oldStatus[0] = oldStatusAndtargetStatus[0];
							oldStatus[1] = oldStatusAndtargetStatus[0];
						}
					}
				}

				// 修改期刊状态
				for (Record journal : journalList) {
					String reviewStatus = journal.getStr("review_status");
					if (reviewStatus != null) {
						if (reviewStatus.equals(oldStatus[0]) || reviewStatus.equals(oldStatus[1])) {
							journal.set("review_status", targetStatus);
							Db.update("WSSJOURNAL", "JournalId", journal);
							// 添加审批操作记录（非投票评论）
							Record reviewLog = new Record()
									.set("user_id", curr_user.getInt("UserId"))
									.set("journal_id",
											journal.getInt("JournalId"))
									.set("old_status", reviewStatus)
									.set("new_status", targetStatus)
									.set("handle_time", new Date().toString());
							Db.save("Wprim_Review_Log", reviewLog);
						} else {
							// 期刊评审状态不符合审批操作条件
							failed++;
						}
					}
				}
				errorAmount = failed;
			} else {
				// 无权限
				errorAmount = journalIds.length;
			}
			return errorAmount;
		}
		return null;
	}

	@Override
	public List<Record> findAllCountry() {
		return Db.find("select * from Wprim_Country");
	}

	@Override
	public void update(UploadFile file, Journal journal, String ISSN1,
			String ISSN2, String EISSN1, String EISSN2) {
		if (file != null) {
			journal.set("cover", "/picture/" + file.getFileName());
		}
		journal.set("ISSN", ISSN1 + "-" + ISSN2);
		journal.set("EISSN", EISSN1 + "-" + EISSN2);
		journal.save();
	}

	@Override
	public void vote(Record curr_user, Integer journalId, String voteType,
			String comment, Integer isAgree) {
		// 再次检查当前用户投票评论权限
		// 1.检查期刊知否可以投票评论
		Record journal = Db.findById("WSSJOURNAL", "JournalId", journalId);
		String review_status = journal.getStr("review_status");
		int userId = curr_user.getInt("UserId");
		if (voteType != null) {
			boolean canVote = false;
			// 国家级评审要求期刊状态为已提交至NJSC或NJSC评审中
			if (voteType.equals("national")) {
				if (review_status.equals(JournalStatus.SUBMITTEDTONJSC)
						|| review_status.equals(JournalStatus.REVIEWEDBYNJSC)) {
					canVote = true;
				}
				// 国际评审要求期刊状态为已提交至RJSC或RJSC评审中
			} else if (voteType.equals("regional")) {
				if (review_status.equals(JournalStatus.SUBMITTEDTORJSC)
						|| review_status.equals(JournalStatus.REVIEWEDBYRJSC)) {
					canVote = true;
				}
			}

			if (canVote) {
				// 2.检查当前用户是否有投票评审该期刊的权限
				Record vote = Db
						.findFirst(
								"select * from Wprim_Vote where user_id = ? and journal_id = ? and type = ?",
								userId, journalId, voteType);
				if (vote == null) {
					// 通过权限及期刊状态检验，进行投票评审
					Record newVote = new Record().set("user_id", userId)
							.set("journal_id", journalId)
							.set("is_agree", isAgree).set("comment", comment)
							.set("type", voteType)
							.set("create_time", new Date().toString());
					Db.save("Wprim_Vote", newVote);
					// 修改期刊状态为已提交至xxx,修改为xxx评审中（NJSC/RJSC）
					if (review_status.equals(JournalStatus.SUBMITTEDTONJSC)
							&& voteType.equals("national")) {
						journal.set("review_status",
								JournalStatus.REVIEWEDBYNJSC);
					} else if (review_status
							.equals(JournalStatus.SUBMITTEDTORJSC)
							&& voteType.equals("regional")) {
						journal.set("review_status",
								JournalStatus.REVIEWEDBYRJSC);
					}
					Db.update("WSSJOURNAL", "JournalId", journal);
				} else {
					// 如果当前用户已经参与过该期刊投票评审，修改原有内容
					vote.set("is_agree", isAgree).set("comment", comment)
							.set("create_time", new Date().toString());
					Db.update("Wprim_Vote", vote);
				}
			}
		}
	}

	@Override
	public Object getVote(Record curr_user, Integer journalId, String voteType) {
		return Db
				.findFirst(
						"select * from Wprim_Vote where user_id = ? and journal_id = ? and type = ?",
						curr_user.getInt("UserId"), journalId, voteType);
	}

	@Override
	public Page<Record> findAllApproved(int pageNumber, String journalTitle,
			String startWith, String newsroom, String country) {
		int pageSize = 15;
		journalTitle = journalTitle == null ? "" : journalTitle;
		startWith = startWith == null ? "" : startWith;
		String lowerCaseStartWith = startWith.toLowerCase();
		newsroom = newsroom == null ? "" : newsroom;
		country = country == null ? "" : country;
		return Db.paginate(pageNumber, pageSize, "select journalTitle,JournalId", "from WSSJOURNAL where journalTitle like '%" + journalTitle + "%' and (journalTitle like '" + startWith + "%' or journalTitle like '" + lowerCaseStartWith + "%') and edit_department like '%" + newsroom + "%' and country like '%" + country + "%' and review_status = 'approved by RJSC'");
	}

	@Override
	public boolean canCreateNewJournal(Record curr_user) {
		//系统管理员，期刊编辑部，国家联络员，国家数据管理员可以创建期刊
		List<String> roleNames = new ArrayList<String>();
		roleNames.add(RoleName.SYSTEMADMINISTRATOR);
		roleNames.add(RoleName.JOURNALEDITORIALDEPARTMENT);
		roleNames.add(RoleName.NATIONALLIAISONER);
		roleNames.add(RoleName.NATIONALDATAMANAGER);
		return UserUtil.haveAnyOfRoles(curr_user, roleNames);
	}

	@Override
	public Object setNewsroom(Record curr_user) {
		if(UserUtil.haveRole(curr_user, RoleName.JOURNALEDITORIALDEPARTMENT) && !UserUtil.haveRole(curr_user, RoleName.NATIONALDATAMANAGER)){
			return curr_user.getStr("EditDep");
		}
		return null;
	}

	@Override
	public Object setCountry(Record curr_user) {
		if(UserUtil.haveRole(curr_user, RoleName.NATIONALDATAMANAGER)){
			return curr_user.getStr("Country");
		}
		return null;
	}
}
